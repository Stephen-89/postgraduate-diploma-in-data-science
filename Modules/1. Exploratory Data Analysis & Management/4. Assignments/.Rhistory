install.packages("knitr")
install.packages("tinytex")
#-------------------------------------------------------#
#Q1 Create a matrix with three rows A, B and C and four columns with names Q, W, E and R. Fill the matrix with any numbers between 1 and 10.
#-------------------------------------------------------#
q1_matrix <- matrix(c(6,1,5,9,2,6,2,3,7,4,8,5),nrow=3,ncol=4)
rownames(q1_matrix) <- c("A","B","C")
colnames(q1_matrix) <- c("Q","W","E","R")
print(q1_matrix)
#-------------------------------------------------------#
#Q2 x = 24, y =”Hello World”, z = 93.65. Identify the class of x, y and z and convert all three into factor.
#-------------------------------------------------------#
x <- 24
y <- "Hello World"
z <- 93.65
class_x <- class(x)
class_y <- class(y)
class_z <- class(z)
print(class_x)
print(class_y)
print(class_z)
factor_x <- factor(x)
factor_y <- factor(y)
factor_z <- factor(z)
print(q1_matrix)
print(q1_matrix)
print(q1_matrix)
#-------------------------------------------------------#
#Q3 q = 65.9836
# a. Find square root of q and round it up to 3 digits.
# b. Check if log to the base 10 of q is less than 2.
#-------------------------------------------------------#
q = 65.9836
q3_a_square_root_q <- round(sqrt(q),3)
q3_b_log10_less_than_2 <- log10(q)<2
#-------------------------------------------------------#
#Q4 x = c(“Intelligence”, “Knowledge”, “Wisdom”, “Comprehension”), y = “I am”, z = “intelligent”
# a. Find first 4 letters of each word in x.
# b. Combine y and z to form a sentence “I am intelligent”
# c. Convert all the words in x to upper case.
#-------------------------------------------------------#
x = c("Intelligence", "Knowledge", "Wisdom", "Comprehension")
y = "I am"
z = "intelligent"
q4_a_first_4_letters_in_x <- substr(x, 1, 4)
q4_b_combine_y_and_z <- paste(y,z)
q4_c_toupper_x <- toupper(x)
#-------------------------------------------------------#
#Q5 a = c(3,4,14,17,3,98,66,85,44) Print “Yes” if the numbers in ‘a’ are divisible by 3 and “No” if they are not divisible by 3 using ifelse().
#-------------------------------------------------------#
a = c(3,4,14,17,3,98,66,85,44)
divisible_by_3 <- ifelse(a %% 3 == 0,"Yes","No")
print(divisible_by_3)
#-------------------------------------------------------#
#Q6 b = c(36,3,5,19,2,16,18,41,35,28,30,31) List all the numbers less than 30 in b using for loop.
#-------------------------------------------------------#
b = c(36,3,5,19,2,16,18,41,35,28,30,31)
for (i in b) {
if (i < 30) {
print(i)
}
}
#-------------------------------------------------------#
# Q7 Date = “01/30/18”
# a. Convert Date into standard date format (yyyy-mm-dd) and name it as Date_new.
# b. Extract day of week and month from Date_new.
# C. Find the difference in the current system date and Date_new.
#-------------------------------------------------------#
Date = "01/30/18"
#Q7 a
Date_new <- as.Date(Date, format = "%m/%d/%y")
#Q7 b
day_of_week <- format(Date_new, "%d")
month <- format(Date_new, "%m")
#Q7 c
todays_date <- Sys.Date()
difference_in_days <- todays_date - Date_new
print(difference_in_days)
factor_x <- factor(x)
factor_y <- factor(y)
factor_z <- factor(z)
print(factor_x)
print(factor_y)
print(factor_z)
x <- 24
y <- "Hello World"
z <- 93.65
class_x <- class(x)
class_y <- class(y)
class_z <- class(z)
print(class_x)
print(class_y)
print(class_z)
factor_x <- factor(x)
factor_y <- factor(y)
factor_z <- factor(z)
print(factor_x)
print(factor_y)
print(factor_z)
print(round(sqrt(q),3))
difference_in_days <- Sys.Date() - Date_new
Date = "01/30/18"
#Q7 a
Date_new <- as.Date(Date, format = "%m/%d/%y")
print(Date_new)
#Q7 b
day_of_week <- format(Date_new, "%d")
month <- format(Date_new, "%m")
print(day_of_week)
print(month)
#Q7 c
difference_in_days <- Sys.Date() - Date_new
print(difference_in_days)
#' ---
#' title: "Assignment 3 Descriptive Statistics"
#' author: "Stephen Hoey"
#' date: "Oct 11th, 2024"
#' ---
library(car)
library(ggplot2)
library(e1071)
library(dplyr)
#-------------------------------------------------------#
#Q1 Import Premiums data.
#-------------------------------------------------------#
Premium <- read.csv("Premiums.csv", header = T, stringsAsFactors=T)
setwd("C:/Users/steph/OneDrive/Desktop/postgraduate-diploma-in-data-science/Modules/1. Exploratory Data Analysis & Management/4. Assignments")
#' ---
#' title: "Assignment 3 Descriptive Statistics"
#' author: "Stephen Hoey"
#' date: "Oct 11th, 2024"
#' ---
library(car)
library(ggplot2)
library(e1071)
library(dplyr)
#-------------------------------------------------------#
#Q1 Import Premiums data.
#-------------------------------------------------------#
Premium <- read.csv("Premiums.csv", header = T, stringsAsFactors=T)
#-------------------------------------------------------#
#Q2 Obtain the Mode for the count of policies available across each Zone.
#-------------------------------------------------------#
getmode <- function(x) {
mode <- unique(x)
mode[which.max(tabulate(match(x, mode)))]
}
mode_by_zone_name <- aggregate(Premium ~ ZONE_NAME, data = Premium, FUN = getmode)
print(mode_by_zone_name)
#-------------------------------------------------------#
#Q3 Obtain box-whisker plots for Vintage period.
#-------------------------------------------------------#
boxplot(Premium$Vintage_Period,
main = "Box-whisker plots for Vintage Period.",
xlab = "Vintage Period",
ylab = "Values",
col = "lightblue",
border = "#0c4c8a")
#-------------------------------------------------------#
#Q4 Detect outliers if present. Hint: use Boxplot() function of ‘car’ Package
#-------------------------------------------------------#
Boxplot(Premium$Vintage_Period,
main = "Outliers boxplot of Vintage Period.",
xlab = "Vintage Period",
ylab = "Values",
col = "lightblue",
border = "#0c4c8a")
#-------------------------------------------------------#
#Q5 Find skewness and kurtosis of Premium amount by Zone.
#-------------------------------------------------------#
summary_stats <- Premium %>%
group_by(ZONE_NAME) %>%
summarise(
Skewness = skewness(Premium),
Kurtosis = kurtosis(Premium)
)
print(summary_stats)
ggplot(summary_stats, aes(x = ZONE_NAME, y = Skewness, fill = ZONE_NAME)) +
geom_bar(stat = "identity") +
geom_text(aes(label = round(Skewness, 2)),
vjust = -0.5,
size = 4) +
labs(title = "Skewness of Premiums by Zone Name", x = "Zone Name", y = "Skewness") +
theme_dark()
ggplot(summary_stats, aes(x = ZONE_NAME, y = Kurtosis, fill = ZONE_NAME)) +
geom_bar(stat = "identity") +
geom_text(aes(label = round(Kurtosis, 2)), colour = "white",
vjust = -0.5,
size = 4) +
labs(title = "Kurtosis of Premiums by Zone Name", x = "Zone Name", y = "Kurtosis") +
theme_dark()
#-------------------------------------------------------#
#Q6 Draw a scatter plot of Premium and Vintage period.
#-------------------------------------------------------#
ggplot(Premium, aes(x = Premium, y = Vintage_Period)) +
geom_point(color = "white", size = 2) +
geom_smooth(method = "lm", color = "#0c4c8a") +
labs(title = "Scatter Plot of Premium and Vintage Period",
x = "Premium",
y = "Vintage Period") +
theme_dark()
#-------------------------------------------------------#
#Q7 Find the correlation coefficient between Premium and Vintage period and interpret the value.
#-------------------------------------------------------#
correlation_coefficient <- cor(Premium$Premium, Premium$Vintage_Period)
print(correlation_coefficient)
getrelationship <- function(x) {
if (x == 1) {
return("Correlation Coefficient indicates a perfect positive relationship.")
} else if (x == -1) {
return("Correlation Coefficient indicates a perfect negative relationship.")
} else if (x > 0) {
return("Correlation Coefficient indicates a positive relationship.")
} else if (x < 0) {
return("Correlation Coefficient indicates a negative relationship.")
} else {
return("Correlation Coefficient indicates no relationship.")
}
}
relationship <- getrelationship(correlation_coefficient)
print(relationship)
#' ---
#' title: "Assignment 3 Descriptive Statistics"
#' author: "Stephen Hoey"
#' date: "Oct 11th, 2024"
#' ---
library(car)
library(ggplot2)
library(e1071)
library(dplyr)
#-------------------------------------------------------#
#Q1 Import Premiums data.
#-------------------------------------------------------#
Premium <- read.csv("Premiums.csv", header = T, stringsAsFactors=T)
#-------------------------------------------------------#
#Q2 Obtain the Mode for the count of policies available across each Zone.
#-------------------------------------------------------#
getmode <- function(x) {
mode <- unique(x)
mode[which.max(tabulate(match(x, mode)))]
}
mode_by_zone_name <- aggregate(Premium ~ ZONE_NAME, data = Premium, FUN = getmode)
print(mode_by_zone_name)
#-------------------------------------------------------#
#Q3 Obtain box-whisker plots for Vintage period.
#-------------------------------------------------------#
boxplot(Premium$Vintage_Period,
main = "Box-whisker plots for Vintage Period.",
xlab = "Vintage Period",
ylab = "Values",
col = "lightblue",
border = "#0c4c8a")
#-------------------------------------------------------#
#Q4 Detect outliers if present. Hint: use Boxplot() function of ‘car’ Package
#-------------------------------------------------------#
Boxplot(Premium$Vintage_Period,
main = "Outliers boxplot of Vintage Period.",
xlab = "Vintage Period",
ylab = "Values",
col = "lightblue",
border = "#0c4c8a")
#-------------------------------------------------------#
#Q5 Find skewness and kurtosis of Premium amount by Zone.
#-------------------------------------------------------#
summary_stats <- Premium %>%
group_by(ZONE_NAME) %>%
summarise(
Skewness = skewness(Premium),
Kurtosis = kurtosis(Premium)
)
print(summary_stats)
ggplot(summary_stats, aes(x = ZONE_NAME, y = Skewness, fill = ZONE_NAME)) +
geom_bar(stat = "identity") +
geom_text(aes(label = round(Skewness, 2)),
vjust = -0.5,
size = 4) +
labs(title = "Skewness of Premiums by Zone Name", x = "Zone Name", y = "Skewness") +
theme_dark()
ggplot(summary_stats, aes(x = ZONE_NAME, y = Kurtosis, fill = ZONE_NAME)) +
geom_bar(stat = "identity") +
geom_text(aes(label = round(Kurtosis, 2)), colour = "white",
vjust = -0.5,
size = 4) +
labs(title = "Kurtosis of Premiums by Zone Name", x = "Zone Name", y = "Kurtosis") +
theme_dark()
#-------------------------------------------------------#
#Q6 Draw a scatter plot of Premium and Vintage period.
#-------------------------------------------------------#
ggplot(Premium, aes(x = Premium, y = Vintage_Period)) +
geom_point(color = "white", size = 2) +
geom_smooth(method = "lm", color = "#0c4c8a") +
labs(title = "Scatter Plot of Premium and Vintage Period",
x = "Premium",
y = "Vintage Period") +
theme_dark()
#-------------------------------------------------------#
#Q7 Find the correlation coefficient between Premium and Vintage period and interpret the value.
#-------------------------------------------------------#
correlation_coefficient <- cor(Premium$Premium, Premium$Vintage_Period)
print(correlation_coefficient)
getrelationship <- function(x) {
if (x == 1) {
return("Correlation Coefficient indicates a perfect positive relationship.")
} else if (x == -1) {
return("Correlation Coefficient indicates a perfect negative relationship.")
} else if (x > 0) {
return("Correlation Coefficient indicates a positive relationship.")
} else if (x < 0) {
return("Correlation Coefficient indicates a negative relationship.")
} else {
return("Correlation Coefficient indicates no relationship.")
}
}
relationship <- getrelationship(correlation_coefficient)
print(relationship)
